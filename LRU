package Google2015;

import java.util.HashMap;


public class LRU {
    HashMap<Integer,DoubleLinkedNode> map;
    int size;
    int capacity;
    DoubleLinkedNode head;
    DoubleLinkedNode tail;
    public void put(int key, int value){
        if(map.containsKey(key)){
            map.get(key).value = value;
            remove(map.get(key));
            setHead(map.get(key));
        }else{
           DoubleLinkedNode node = new DoubleLinkedNode(key,value);
           if(size<capacity){
               size++;
           }else{
               remove(tail);
               tail = tail.pre;
               if(tail!=null) tail.next = null;
           }
               setHead(node);
               map.put(key,node);
        }
    }
    public int get(int key){
        if(!map.containsKey(key)) return -1;
        DoubleLinkedNode cur = map.get(key);
        remove(cur);
        setHead(cur);
        return cur.value;
    }
    public void remove(DoubleLinkedNode node){
        DoubleLinkedNode pre = node.pre;
        DoubleLinkedNode next = node.next;
        if(pre!=null)
            pre.next = next;
        else head = next;

        if(next !=null)
            next.pre = pre;
        else tail = pre;

    }
    public void setHead(DoubleLinkedNode node){
        node.next = head;
        node.pre = null;
        if(head!=null)
            head.pre = node;
        head= node;
        if(tail == null) tail = node;
    }


    private class DoubleLinkedNode{
        private int key;
        private int value;
        DoubleLinkedNode pre;
        DoubleLinkedNode next;
        DoubleLinkedNode(int key, int value){
            this.key = key;
            this.value = value;
        }
        public int getKey(){
            return this.key;
        }
        public int getValue(){
            return this.value;
        }

    }
}
