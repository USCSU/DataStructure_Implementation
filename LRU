package Google2015.Data_Structure;

import java.util.HashMap;


public class LRU<K,V> {
    HashMap<K,circularLinkedNode> map;
    circularLinkedNode head;
    circularLinkedNode tail;
    int size;
    int capacity;
    public LRU(){
        map = new HashMap<K, circularLinkedNode>();
        capacity = 1<< 4;
    }
    public LRU(int capacity){
        this.capacity = capacity;
        map = new HashMap<K, circularLinkedNode>();
    }
    private boolean isOverLoad(){
        return size == capacity;
    }
    public void put(K key, V value){
        if(map.containsKey(key)){
            circularLinkedNode node = map.get(key);
            node.setVal(value);
            remove(node);
            setHead(node);
        }else{
            circularLinkedNode node = new circularLinkedNode(key,value);
            if(isOverLoad()){
                remove(tail);

            }else{
                size++;
            }
            map.put(key,node);
            setHead(node);

        }
    }
    public V get(K key){
       if(!map.containsKey(key)) return null;
       circularLinkedNode node = map.get(key);
       remove(node);
       setHead(node);
       return (V)node.getVal();
    }
    public void setHead(circularLinkedNode node){
        node.next = head;
        node.pre = null;
        if(head !=null)
            head.pre = node;
        head = node;
        if(tail == null)
            tail = node;

    }
    public void remove(circularLinkedNode node){
        circularLinkedNode pre = node.pre;
        circularLinkedNode next = node.next;
        if(pre!=null)
            pre.next = next;
        else
            head = next;

        if(next!=null)
            next.pre = pre;
        else
            tail = pre;
    }

    class circularLinkedNode<K,V>{
        private circularLinkedNode pre;
        private circularLinkedNode next;
        private V val;
        private K key;
        circularLinkedNode(K key, V value){
            this.key = key;
            this.val = value;
        }
        public void setVal(V val){
            this.val = val;
        }
        public void setKey(K key){
            this.key = key;
        }
        public K getKey(){
            return (K)key;
        }
        public V getVal(){
            return (V)val;
        }
    }
    public static void main(String[] args){
        LRU<String, Integer> lru = new LRU<String, Integer>(2);
        lru.put("abc",1);
        lru.put("bac",2);
        lru.put("okl",3);
        lru.put("poi",4);
        System.out.println(lru.get("abc"));

    }
}
