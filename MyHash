package Google2015.Data_Structure;

import java.util.LinkedList;

/**
 * Created by Trace_route on 3/7/15.
 */
public class MyHash<K,V> {
    LinkedList<Entry<K,V>>[] items;
    int capacity;
    int size;
    float load_Factor;
    MyHash(){
        load_Factor=0.75f;
        capacity = 1<<1;
        items = new LinkedList[capacity];
    }
    MyHash(int capacity, float load_Factor){
        if(capacity<1 || load_Factor<0 || Float.isNaN(load_Factor)) throw new IllegalArgumentException("wrong parameter");
        if(capacity > 1<<30) this.capacity = 1<<30;
        else if((capacity & 1) ==1){
            this.capacity = 1;
            while(this.capacity < capacity){
                this.capacity <<= 1;
            }
        }
        else
            this.capacity = capacity;
        this.load_Factor = load_Factor;
        items = new LinkedList[this.capacity];
    }
    private boolean isOverLoad(){
        return size/capacity>load_Factor;
    }
    private int hashCode(K key){
        return key.toString().length()%capacity;
    }
    public void put(K key, V value){
        if(isOverLoad()) resize();
        Entry<K,V> item = new Entry<K, V>(key,value);
        int hash = hashCode(key);
        if(items[hash] == null){
            items[hash] = new LinkedList<Entry<K, V>>();
        }else{
            LinkedList<Entry<K,V>> list = items[hash];
            for(int i =0;i<list.size();i++){
                if(item.equals(list.get(i))){
                    list.remove(i);
                    size--;
                }
            }
        }
        items[hash].addFirst(item);
        size++;
    }
    public V get(K key){
        int hash = hashCode(key);
        if(items[hash] == null) return null;
        else{
            LinkedList<Entry<K,V>> list = items[hash];
            for(Entry<K,V> entry:list){
                if(key.equals(entry.getKey()))
                    return entry.getValue();
            }
        }
        return null;
    }
    public void remove(K key){
        int hash = hashCode(key);
        if(items[hash] == null) return;
        else{
            LinkedList<Entry<K,V>> list = items[hash];
            for(int i =0;i<list.size();i++){
                if(key.equals(list.get(i).getKey())){
                    list.remove(i);
                    size--;
                    return;
                }
            }
        }
    }
    public void resize(){
        capacity*=2;
        LinkedList<Entry<K,V>>[] newItems = new LinkedList[capacity];
        for(LinkedList<Entry<K,V>> item:items){
            if(item == null) continue;
            for(Entry<K,V> entry:item){
                int hash = hashCode(entry.getKey());
                if(newItems[hash] == null){
                    newItems[hash] = new LinkedList<Entry<K, V>>();
                }
                newItems[hash].addFirst(entry);
            }
        }
        items = newItems;

    }
    class Entry<K,V>{
        private K key;
        private V value;
        public Entry(K key, V value){
            this.value = value;
            this.key = key;
        }
        public boolean equals(Entry<K,V> entry){
            return key.equals(entry.key);
        }
        public K getKey(){
            return key;
        }
        public V getValue(){
            return value;
        }
    }
    public static void main(String[] args){
        MyHash<String, Integer> hash = new MyHash<String, Integer>();
        hash.put("abc",2);
        hash.put("abd",3);
        hash.put("oi",4);
        hash.put("sl",5);
        hash.put("nv",6);
        hash.put("ny",7);
        hash.put("ca",8);
        System.out.println(hash.get("abc"));
        System.out.println(hash.get("abd"));
        System.out.println(hash.get("sl"));
        System.out.println(hash.get("ca"));
        hash.remove("ny");
        System.out.println(hash.get("jkd"));
        System.out.println(hash.get("oi"));
        System.out.println(hash.get("nv"));
        System.out.println(hash.get("ny"));
        System.out.println(hash.get("ca"));

    }
}
